// Code generated by ent, DO NOT EDIT.

package database

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jurshsmith/vaultstream/database/record"
	"github.com/jurshsmith/vaultstream/database/signature"
)

// Signature is the model entity for the Signature schema.
type Signature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RecordID holds the value of the "record_id" field.
	RecordID int `json:"record_id"`
	// KeyID holds the value of the "key_id" field.
	KeyID int `json:"key_id"`
	// Value holds the value of the "value" field.
	Value string `json:"value"`
	// InsertedAt holds the value of the "inserted_at" field.
	InsertedAt time.Time `json:"inserted_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SignatureQuery when eager-loading is set.
	Edges        SignatureEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SignatureEdges holds the relations/edges for other nodes in the graph.
type SignatureEdges struct {
	// Record holds the value of the record edge.
	Record *Record `json:"record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SignatureEdges) RecordOrErr() (*Record, error) {
	if e.Record != nil {
		return e.Record, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: record.Label}
	}
	return nil, &NotLoadedError{edge: "record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Signature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signature.FieldID, signature.FieldRecordID, signature.FieldKeyID:
			values[i] = new(sql.NullInt64)
		case signature.FieldValue:
			values[i] = new(sql.NullString)
		case signature.FieldInsertedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Signature fields.
func (s *Signature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case signature.FieldRecordID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_id", values[i])
			} else if value.Valid {
				s.RecordID = int(value.Int64)
			}
		case signature.FieldKeyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field key_id", values[i])
			} else if value.Valid {
				s.KeyID = int(value.Int64)
			}
		case signature.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				s.Value = value.String
			}
		case signature.FieldInsertedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field inserted_at", values[i])
			} else if value.Valid {
				s.InsertedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Signature.
// This includes values selected through modifiers, order, etc.
func (s *Signature) GetValue(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryRecord queries the "record" edge of the Signature entity.
func (s *Signature) QueryRecord() *RecordQuery {
	return NewSignatureClient(s.config).QueryRecord(s)
}

// Update returns a builder for updating this Signature.
// Note that you need to call Signature.Unwrap() before calling this method if this Signature
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Signature) Update() *SignatureUpdateOne {
	return NewSignatureClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Signature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Signature) Unwrap() *Signature {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("database: Signature is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Signature) String() string {
	var builder strings.Builder
	builder.WriteString("Signature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("record_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RecordID))
	builder.WriteString(", ")
	builder.WriteString("key_id=")
	builder.WriteString(fmt.Sprintf("%v", s.KeyID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(s.Value)
	builder.WriteString(", ")
	builder.WriteString("inserted_at=")
	builder.WriteString(s.InsertedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Signatures is a parsable slice of Signature.
type Signatures []*Signature
