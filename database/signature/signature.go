// Code generated by ent, DO NOT EDIT.

package signature

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the signature type in the database.
	Label = "signature"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRecordID holds the string denoting the record_id field in the database.
	FieldRecordID = "record_id"
	// FieldKeyID holds the string denoting the key_id field in the database.
	FieldKeyID = "key_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldInsertedAt holds the string denoting the inserted_at field in the database.
	FieldInsertedAt = "inserted_at"
	// EdgeRecord holds the string denoting the record edge name in mutations.
	EdgeRecord = "record"
	// Table holds the table name of the signature in the database.
	Table = "signatures"
	// RecordTable is the table that holds the record relation/edge.
	RecordTable = "signatures"
	// RecordInverseTable is the table name for the Record entity.
	// It exists in this package in order to avoid circular dependency with the "record" package.
	RecordInverseTable = "records"
	// RecordColumn is the table column denoting the record relation/edge.
	RecordColumn = "record_id"
)

// Columns holds all SQL columns for signature fields.
var Columns = []string{
	FieldID,
	FieldRecordID,
	FieldKeyID,
	FieldValue,
	FieldInsertedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeyIDValidator is a validator for the "key_id" field. It is called by the builders before save.
	KeyIDValidator func(int) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
	// DefaultInsertedAt holds the default value on creation for the "inserted_at" field.
	DefaultInsertedAt func() time.Time
)

// OrderOption defines the ordering options for the Signature queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRecordID orders the results by the record_id field.
func ByRecordID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordID, opts...).ToFunc()
}

// ByKeyID orders the results by the key_id field.
func ByKeyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByInsertedAt orders the results by the inserted_at field.
func ByInsertedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInsertedAt, opts...).ToFunc()
}

// ByRecordField orders the results by record field.
func ByRecordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordStep(), sql.OrderByField(field, opts...))
	}
}
func newRecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, RecordTable, RecordColumn),
	)
}
