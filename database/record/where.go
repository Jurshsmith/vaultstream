// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jurshsmith/vaultstream/database/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldID, id))
}

// InsertedAt applies equality check predicate on the "inserted_at" field. It's identical to InsertedAtEQ.
func InsertedAt(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldInsertedAt, v))
}

// InsertedAtEQ applies the EQ predicate on the "inserted_at" field.
func InsertedAtEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldInsertedAt, v))
}

// InsertedAtNEQ applies the NEQ predicate on the "inserted_at" field.
func InsertedAtNEQ(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldInsertedAt, v))
}

// InsertedAtIn applies the In predicate on the "inserted_at" field.
func InsertedAtIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldInsertedAt, vs...))
}

// InsertedAtNotIn applies the NotIn predicate on the "inserted_at" field.
func InsertedAtNotIn(vs ...time.Time) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldInsertedAt, vs...))
}

// InsertedAtGT applies the GT predicate on the "inserted_at" field.
func InsertedAtGT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldInsertedAt, v))
}

// InsertedAtGTE applies the GTE predicate on the "inserted_at" field.
func InsertedAtGTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldInsertedAt, v))
}

// InsertedAtLT applies the LT predicate on the "inserted_at" field.
func InsertedAtLT(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldInsertedAt, v))
}

// InsertedAtLTE applies the LTE predicate on the "inserted_at" field.
func InsertedAtLTE(v time.Time) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldInsertedAt, v))
}

// HasSignature applies the HasEdge predicate on the "signature" edge.
func HasSignature() predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SignatureTable, SignatureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSignatureWith applies the HasEdge predicate on the "signature" edge with a given conditions (other predicates).
func HasSignatureWith(preds ...predicate.Signature) predicate.Record {
	return predicate.Record(func(s *sql.Selector) {
		step := newSignatureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Record) predicate.Record {
	return predicate.Record(sql.NotPredicates(p))
}
