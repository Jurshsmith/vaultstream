// Code generated by ent, DO NOT EDIT.

package record

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the record type in the database.
	Label = "record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInsertedAt holds the string denoting the inserted_at field in the database.
	FieldInsertedAt = "inserted_at"
	// EdgeSignature holds the string denoting the signature edge name in mutations.
	EdgeSignature = "signature"
	// Table holds the table name of the record in the database.
	Table = "records"
	// SignatureTable is the table that holds the signature relation/edge.
	SignatureTable = "signatures"
	// SignatureInverseTable is the table name for the Signature entity.
	// It exists in this package in order to avoid circular dependency with the "signature" package.
	SignatureInverseTable = "signatures"
	// SignatureColumn is the table column denoting the signature relation/edge.
	SignatureColumn = "record_id"
)

// Columns holds all SQL columns for record fields.
var Columns = []string{
	FieldID,
	FieldInsertedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultInsertedAt holds the default value on creation for the "inserted_at" field.
	DefaultInsertedAt func() time.Time
)

// OrderOption defines the ordering options for the Record queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInsertedAt orders the results by the inserted_at field.
func ByInsertedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInsertedAt, opts...).ToFunc()
}

// BySignatureField orders the results by signature field.
func BySignatureField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSignatureStep(), sql.OrderByField(field, opts...))
	}
}
func newSignatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SignatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SignatureTable, SignatureColumn),
	)
}
